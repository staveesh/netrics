dev:
  schedule: "H/5 * * * *"

dns-latency:
  schedule: "H/5 * * * *"
  param:
    destinations:
      - www.amazon.com
      - chicago.suntimes.com
      - www.chicagotribune.com
      - cs.uchicago.edu
      - www.facebook.com
      - www.google.com
      - www.wikipedia.org
      - www.youtube.com

hops:
  command: hops-traceroute
  schedule: "H/5 * * * *"
  unless: &scamper-on |
    env.NETRICS_BETA_SCAMPER | default('0') | int == 1
  param:
    destinations:
      www.google.com: google

hops-scamper:
  schedule: "H/5 * * * *"
  if: *scamper-on

ip:
  schedule: "H/5 * * * *"
  unless: env.NETRICS_IP_QUERY | default('1') | int == 0

lml:
  command: lml-traceroute
  schedule: "H/5 * * * *"
  unless: *scamper-on
  param:
    destinations:
      1.1.1.1: Cloudflare_DNS

lml-scamper:
  schedule: "H/5 * * * *"
  if: *scamper-on

ping:
  schedule: "H/5 * * * *"
  param:
    destinations:
      # network locator: results label
      www.google.com: google
      www.amazon.com: amazon
      www.wikipedia.org: wikipedia
      www.youtube.com: youtube
      www.facebook.com: facebook
      www.chicagotribune.com: tribune
      chicago.suntimes.com: suntimes
      cs.uchicago.edu: uchicago
      4.71.251.129: Chicago
      4.35.238.193: Washington_DC
      4.71.254.129: Atlanta
      4.34.58.1: Denver
      38.102.0.65: Seattle
      183.178.65.1: Hong_Kong
      175.45.79.73: Sydney
      196.24.45.129: Johannesburg
      41.231.21.1: Tunis
      77.67.119.129: Paris
      195.89.146.193: Stockholm
      190.98.158.1: Sao_Paulo

speed-ndt7: &speed-conf
  schedule:
    #
    # Hourly.
    #
    # We use "U" such that the minute past the hour is chosen for us based on a
    # hash of *both* the "hash" value (as with "H") *and* a device-UNIQUE value
    # (generally a MAC address).
    #
    expression: "U * * * *"
    #
    # We specify the below value to hash such that other speed tests, which we
    # want to *coincide* with this one, may do the same to receive the same
    # offset/jitter, (rather than an arbitrary offset based on a hash of their
    # name).
    #
    hash: speed
    #
    # I.e.:
    #
    # * we want each device's speed tests to enqueue at the same time such that
    #   they test similar network conditions
    #
    # * we want that time to be selected for us such that different devices may
    #   enqueue their speed tests at different times
    #
    # (Note that each device's speed tests will *not* collide -- will not
    # *execute* at the same time -- thanks to "tenancy" below.)
    #

  scheduling:
    #
    # Disallow concurrent measurements.
    #
    tenancy: 1

speed-ookla:
  #
  # See: speed-ndt7
  #
  << : *speed-conf

  param:
    accept_license: true
    timeout: 80

bottleneck-finder:
  schedule: 
    expression: "U * * * *"
    hash: bottleneck
  scheduling:
    tenancy: 1
  param:
    pingType: udp